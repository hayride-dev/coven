package hayride:morph@0.0.13;

// a Morph is a thread supported by a wasmtime instance - that uses host capabilites to communicate between wasmtime instances ( AKA morph channels? )
interface spawn {
    use errors.{error};
    sync: func(name: string, args: list<string>) -> result<string,error>;
    /*
        Parent Wasmtime ( LLM )
            return result of Child Wasmtime ( Lex )
                - sync 

        Parent Wasmtime ( LLM )
            async child wasmtime ( lex ) -> id 
                that id is used to reference a mpc channel in rust 
                that mpc channel is used to communicate between the parent and child wasmtime instances
                     async child wasmtime ( lex ) -> id 
                        that id is used to reference a mpc channel in rust 
                        that mpc channel is used to communicate between the parent and child wasmtime instances
    */
}

interface errors {
    enum error-code {
        invalid-argument,
        timeout,
        runtime-error,
        unsupported-operation,
        too-large,
        unknown
    }

    resource error {
        /// Return the error code.
        code: func() -> error-code;

        /// Errors can propagated with backend specific status through a string value.
        data: func() -> string;
    }
}