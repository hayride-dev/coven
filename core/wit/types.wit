package hayride:core@0.0.47;

interface types {
    record logging {
        enabled: bool,
        level: string,
        file: string
    }

    record core {
        server: server,
        ai: ai
    }

    record http {
        address: string
    }

    record websocket {
        address: string
    }

    record server {
        bin: string,
        config: server-config,
    }

    record server-config {
        http: http,
    }

    record ai {
        bin: string,
        config: ai-config,
    }

    record ai-config {
        websocket: websocket,
        http: http,
        llm: llm,
    }

    record llm {
        model: string
    }

    record config {
        version: string,
        license: string,
        logging: logging,
        core: core,
    }

    enum error-code {
        set-failed,
        get-failed,
        config-not-set,
        unknown
    }
    
    resource error {
        /// Return the error code.
        code: func() -> error-code;

        /// Errors can propagated with backend specific status through a string value.
        data: func() -> string;
    }
}

interface config {
    use types.{config, error};
    get: func() -> result<config, error>;
    set: func(config: config) -> result<_, error>;
}
